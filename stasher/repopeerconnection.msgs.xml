<!--

Copyright 2012 Double Precision, Inc.
See COPYING for distribution information.

-->

<class name="repopeerconnectionObj">

  <method name="do_connect_peer">
    <comment>//! Connection request from the current controller
    </comment>
    <param><decl>const peerlinkptr &amp;peerlinkArg</decl></param>
  </method>

  <method name="do_disconnect_peer">
    <comment>//! The current controller has disconnected
    </comment>
  </method>

  <method name="do_connect_master">
    <comment>//! Connection from a master controller

    //! Invoked by master controller, to establish linkage with a connection
    //! object to one of its slaves.
    </comment>
    <param><decl>const x::ref&lt;mastersyncinfoObj&gt; &amp;synchandle</decl></param>
  </method>

  <method name="do_connect_slave">
    <comment>//! Connection from a slave controller

    //! Invoked by slave controller, to establish linkage with a connection
    //! object to its master.
    </comment>
    <param><decl>const x::ptr&lt;slavesyncinfoObj&gt; &amp;synchandle</decl></param>
  </method>
  <method name="check_sync_end">
    <comment>//! Finished syncing a slave

    //! A thread started by the master controller has finished syncing this
    //! slave. Remove the repository copy destination interface object which
    //! sends messages to the peer.
    </comment>
  </method>

  <method name="commit_peer">
    <comment>//! Commit or cancel a transaction on a slave node

    //! Invoked by the master controller object to send a message
    //! to commit or cancel a transaction on a slave.
    </comment>
    <param><decl>const x::ptr&lt;commitreqObj&gt; &amp;req</decl></param>
    <param><decl>const x::ptr&lt;obj&gt; &amp;mcguffin</decl></param>
  </method>

  <method name="baton_master_announce" default="1" serialize="1">
    <comment>//! Announce that the master wishes to pass the baton

    //! On the master controller node, a message from the master controller
    //! that it wants to pass the baton to
    //! some other peer in the cluster (not this one).
    </comment>

    <param><decl>const std::string &amp;mastername</decl></param>
    <param><decl>const x::uuid &amp;masteruuid</decl></param>
    <param><decl>const x::uuid &amp;batonuuid</decl></param>
    <param><decl>const std::string &amp;newmasterpeer</decl></param>
    <param><decl>const x::ptr&lt;x::obj&gt; &amp;mcguffin</decl></param>
  </method>

  <method name="baton_master_release" serialize="1" default="1">
    <comment>//! Master wishes to release the baton

    //! On the master node, a message from the master controller that it's
    //! releasing the baton.
    </comment>
    <param><decl>const std::string &amp;mastername</decl></param>
    <param><decl>const x::uuid &amp;masteruuid</decl></param>
  </method>

  <method name="baton_oldmaster_install">
    <comment>
      //! Install the baton for switching to a different master

      //! One a slave to an existing master, except for the slave that will
      //! become the new slave, receives a baton announcement, it starts
      //! a thread that acquires a commit lock. Once the commit lock is
      //! acquired, the thread sends the baton back to the slave connection
      //! thread.
    </comment>
    <param><decl>const baton &amp;batonp</decl></param>
  </method>

  <method name="baton_transfer_request">
    <comment>//! Transfer the baton

    //! On the current master node, a message from the master controller to
    //! the connection thread to the new master, that the baton is being
    //! passed to the new node.
    </comment>

    <param>
      <comment>//! The baton that's being transferred
      </comment>
      <decl>const baton &amp;batonp</decl>
    </param>
  </method>

  <method name="batonismine">
    <comment>
      //! Baton has been installed, all peers notified

      //! The former master is notified to give up masterhood.
      //!
    </comment>

    <param>
      <decl>const baton &amp;batonp</decl>
    </param>
  </method>

  <method name="ping">
    <comment>
      //! Send a dummy "ping" message to the peer

      //! The peer responds with a "pong" message
    </comment>

    <param>
      <comment>
	//! Request mcguffin

	//! When the peer responds with the pong, the connection thread
	//! releases its reference on the mcguffin.
      </comment>

      <decl>const x::ptr&lt;x::obj&gt; &amp;mcguffin</decl>
    </param>
  </method>

  <method name="installformermasterbaton">
    <comment>
      //! Ask this connection thread to hold a baton from the former master

      //! This thread keeps a reference to the baton until the peer reports
      //! that it's master is someone else, at which baton the reference to
      //! this baton gets dropped.
      //!
      //! If the peer is already reporting that its master is someone else,
      //! the baton is dropped immediately.
    </comment>

    <param>
      <decl>const baton &amp;batonp</decl>
    </param>
  </method>

  <method name="master_quorum_announce">
    <comment>
      //! Master announces the current cluster quorum status

      //! The master announces to all of its slaves whether all the nodes
      //! in the cluster are connected to the master, and in sync.
    </comment>

    <param>
      <comment>
	//! Master's name
      </comment>
      <decl>const std::string &amp;mastername</decl>
    </param>

    <param>
      <comment>
	//! Master's uuid
      </comment>
      <decl>const x::uuid &amp;uuid</decl>
    </param>

    <param>
      <comment>
	//! Whether all slaves are in sync
      </comment>
      <decl>STASHER_NAMESPACE::quorumstate inquorum</decl>
    </param>
  </method>

  <method name="master_handover_request">
    <comment>
      //! On a slave node, send a request to the master to hand over the baton to some other node
    </comment>

    <param>
      <comment>
	//! Who should be the new master
      </comment>
      <decl>const std::string &amp;newmastername</decl>
    </param>

    <param>
      <comment>
	//! Request mcguffin

	//! The connection thread releases its reference to this mcguffin
	//! when the master acknowledges the request, and the cluster has a
	//! new master (but may not be in quorum, yet).
      </comment>
      <decl>const x::ptr&lt;x::obj&gt; &amp;mcguffin</decl>
    </param>
  </method>

  <method name="handover_request_processed">
    <comment>
      //! Slave's request to a master to hand over the baton has been processed
    </comment>

    <param>
      <decl>const x::uuid &amp;uuid</decl>
    </param>
  </method>

  <method name="make_installattempt">
    <comment>
      //! Make another attempt to install this connection, after the conflicting connection terminates
    </comment>

    <param>
      <comment>
	//! Cluster
      </comment>
      <decl>const x::weakptr&lt;clusterinfoptr&gt; &amp;cluster</decl>
    </param>
  </method>

  <method name="noop">
    <comment>
      //! Used by regression tests
    </comment>

    <param>
      <decl>const x::ptr&lt;x::obj&gt; &amp;mcguffin</decl>
    </param>
  </method>

  <method name="setnewcert_request">
    <comment>
      //! Forward a request, from admin, to install a new cert on this node.
    </comment>

    <param>
      <comment>
	//! The cert request
      </comment>
      <decl>const x::ref&lt;setnewcertObj&gt; &amp;request</decl>
    </param>

    <param>
      <comment>
	//! Request mcguffin

	//! The connection thread releases its reference to this mcguffin
	//! when the peer responds with the results.
      </comment>
      <decl>const x::ptr&lt;x::obj&gt; &amp;mcguffin</decl>
    </param>
  </method>

  <method name="halt_request">
    <comment>
      //! Master controller notifies the slave to halt.
    </comment>

    <param>
      <comment>
	//! Master's name
      </comment>
      <decl>const std::string &amp;mastername</decl>
    </param>

    <param>
      <comment>
	//! Master's uuid
      </comment>
      <decl>const x::uuid &amp;masteruuid</decl>
    </param>

    <param>
      <comment>
	//! Request mcguffin

	//! It's expected that the slave will disconnect, upon receiving the
	//! halt request. The connection process saves this mcguffin. When
	//! the connection dies and the connection process terminates, the
	//! connection process's reference to this mcguffin gets naturally
	//! released.
      </comment>
      <decl>const x::ptr&lt;x::obj&gt; &amp;mcguffin</decl>
    </param>
  </method>
</class>
