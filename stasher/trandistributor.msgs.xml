<!--

Copyright 2012 Double Precision, Inc.
See COPYING for distribution information.

-->

<class name="trandistributorObj">
  <method name="clusterupdated">
    <comment>/*!
    Cluster status notifier's notification: cluster has been updated
    */</comment>
    <param type="class"><decl>clusterinfoObj::cluster_t <name>status</name></decl></param>
  </method>

  <method name="connected">
    <comment>/*!
    Connection request from a peer
    */</comment>
    <param type="class"><decl>std::string <name>peername</name></decl></param>
    <param type="weakptr"><decl>repopeerconnectionptr <name>connection</name></decl></param>
  </method>

  <method name="installreceiver">
    <comment>/*!
    Install a new receiver of transaction uuids

    The receiver's received() callback gets invoked with a list of
    all transactions that have been received by this node. Afterwards,
    received() and cancelled() get called to keep the list up to date.
    */</comment>
    <param type="weakptr"><decl>trandistreceivedptr <name>newreceiver</name></decl></param>
  </method>

  <method name="submit_newtransaction">
    <comment>/*!
    Internal message sent by newtransaction().
    */</comment>
    <param type="class"><decl>newtran <name>tran</name></decl></param>
    <param type="class"><decl>transtatus <name>status</name></decl></param>
    <param type="class"><decl>x::ptr&lt;x::obj&gt; <name>mcguffin</name></decl></param>
  </method>

  <method name="submit_internal_transaction">
    <comment>
      //! Internal message sent by internal_transaction().
    </comment>
    <param type="class"><decl>x::ref&lt;internalTransactionObj&gt; <name>tran</name></decl></param>
  </method>

  <method name="canceltransaction">
    <comment>/*!
    A request to cancel a message.
    */</comment>
    <param type="class"><decl>x::uuid <name>uuid</name></decl></param>
  </method>

  <method name="deserialized_ihave">
    <comment>/*!
    Received an IHAVE message, when synchronizing from a master.
    */</comment>
    <param type="class"><decl>trandistihave <name>msg</name></decl></param>
    <param type="weakptr"><decl>repopeerconnectionptr <name>connection</name></decl></param>
  </method>
  
  <method name="deserialized_cancel">
    <comment>/*!
    Received a CANCEL message, when synchonizing from a master.
    */</comment>    
    <param type="class"><decl>trandistcancel <name>cancel</name></decl></param>
  </method>

  <method name="deserialized_transaction">
    <comment>/*!
    A transaction from a peer has been deserialized
    */</comment>
    <param type="class"><decl>newtran <name>tran</name></decl></param>
    <param type="class"><decl>x::uuid <name>uuid</name></decl></param>
  </method>

  <method name="deserialized_fail">
    <comment>/*!
    Failed to deserialize a transaction from a peer
    */</comment>
    <param type="class"><decl>x::uuid <name>uuid</name></decl></param>
    <param type="class"><decl>dist_received_status_t <name>errcode</name></decl></param>
  </method>

  <method name="completed">
    <comment>/*!
    done_hier/{node}/uuid was created, to mark a completed transaction.

    This is invoked by an object repository callback that detects
    done_hier/{node}/uuid objects.
    */</comment>
    <param type="class"><decl>x::uuid <name>uuid</name></decl></param>
  </method>
</class>
