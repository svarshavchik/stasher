<!--

Copyright 2012-2016 Double Precision, Inc.
See COPYING for distribution information.

-->

<class name="trandistributorObj">
  <method name="notify_clusterupdated">
    <comment>/*!
    Cluster status notifier's notification: cluster has been updated
    */</comment>
    <param><decl>
      const clusterinfoObj::cluster_t &amp;status
    </decl></param>
  </method>

  <method name="connected">
    <comment>/*!
    Connection request from a peer
    */</comment>
    <param><decl>const std::string &amp;peername</decl></param>
    <param>
      <as>x::weakptr&lt;repopeerconnectionptr&gt;</as>
      <decl>
	const x::weakptr&lt;repopeerconnectionptr&gt; &amp;connection
      </decl>
    </param>
  </method>

  <method name="installreceiver">
    <comment>/*!
    Install a new receiver of transaction uuids

    The receiver's received() callback gets invoked with a list of
    all transactions that have been received by this node. Afterwards,
    received() and cancelled() get called to keep the list up to date.
    */</comment>
    <param>
      <as>x::weakptr&lt;trandistreceivedptr&gt;</as>
      <decl>
	const x::weakptr&lt;trandistreceivedptr&gt; &amp;newreceiver
      </decl>
    </param>
  </method>

  <method name="submit_newtransaction">
    <comment>/*!
    Internal message sent by newtransaction().
    */</comment>
    <param><decl>const newtran &amp;tran</decl></param>
    <param><decl>const transtatus &amp;status</decl></param>
    <param><decl>const x::ptr&lt;x::obj&gt; &amp;mcguffin</decl></param>
  </method>

  <method name="submit_internal_transaction">
    <comment>
      //! Internal message sent by internal_transaction().
    </comment>
    <param><decl>const x::ref&lt;internalTransactionObj&gt; &amp;tran</decl></param>
  </method>

  <method name="canceltransaction">
    <comment>/*!
    A request to cancel a message.
    */</comment>
    <param><decl>const x::uuid &amp;uuid</decl></param>
  </method>

  <method name="deserialized_ihave">
    <comment>/*!
    Received an IHAVE message, when synchronizing from a master.
    */</comment>
    <param><decl>const trandistihave &amp;msg</decl></param>
    <param>
      <as>x::weakptr&lt;repopeerconnectionptr&gt;</as>
      <decl>
	const x::weakptr&lt;repopeerconnectionptr&gt; &amp;connection
      </decl>
    </param>
  </method>

  <method name="deserialized_cancel">
    <comment>/*!
    Received a CANCEL message, when synchonizing from a master.

    Overridden in a unit test.

    */</comment>

    <virtual />
    <param><decl>const trandistcancel &amp;cancel</decl></param>
  </method>

  <method name="deserialized_transaction">
    <comment>/*!
    A transaction from a peer has been deserialized

    Overridden in a unit test.

    */</comment>
    <virtual />
    <param><decl>const newtran &amp;tran</decl></param>
    <param><decl>const x::uuid &amp;uuid</decl></param>
  </method>

  <method name="deserialized_fail">
    <comment>/*!
    Failed to deserialize a transaction from a peer
    */</comment>
    <param><decl>const x::uuid &amp;uuid</decl></param>
    <param><decl>const dist_received_status_t &amp;errcode</decl></param>
  </method>

  <method name="completed">
    <comment>/*!
    done_hier/{node}/uuid was created, to mark a completed transaction.

    This is invoked by an object repository callback that detects
    done_hier/{node}/uuid objects.
    */</comment>
    <param><decl>const x::uuid &amp;uuid</decl></param>
  </method>
</class>
